// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: poi.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// poi编辑类型
public enum Com_Yf_Coros_Userdata_ModifyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 正常
  case modifyNormal // = 0

  /// 新增
  case modifyAdd // = 1

  /// 更新
  case modifyUpdate // = 2

  /// 删除 
  case modifyDelete // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .modifyNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .modifyNormal
    case 1: self = .modifyAdd
    case 2: self = .modifyUpdate
    case 3: self = .modifyDelete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .modifyNormal: return 0
    case .modifyAdd: return 1
    case .modifyUpdate: return 2
    case .modifyDelete: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Yf_Coros_Userdata_ModifyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Com_Yf_Coros_Userdata_ModifyType] = [
    .modifyNormal,
    .modifyAdd,
    .modifyUpdate,
    .modifyDelete,
  ]
}

#endif  // swift(>=4.2)

/// 固件端传输的poi信息
/// 兴趣点支持的最大数量为UINT16_MAX，下标从0到UINT16_MAX-1，下标UINT16_MAX不使用
public struct Com_Yf_Coros_Userdata_PoiInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// localId，端类型app/bsp[1Byte]+bsp格式时间戳[4Byte]经度*10000000[4Byte]纬度*10000000[4Byte]生成的crc32
  public var localID: Int32 = 0

  /// 纬度 *10000000
  public var lat: Int32 = 0

  /// 经度 *10000000
  public var lng: Int32 = 0

  /// 海拔，单位：米，最大占两个字节, INT16_MAX表示无海拔
  public var altitude: Int32 = 0

  /// 用户自定义名称
  public var name: String = String()

  /// 兴趣点的类型，最大占两个字节
  public var type: UInt32 = 0

  /// 创建时间戳 20140101时间戳
  public var createTime: UInt32 = 0

  //// bit7:是否跟服务器同步   0未同步，1已同步
  //// bit6:app、bsp是否同步  0未同步，1已同步
  //// bit5:是否是bsp端修改   1bsp端修改
  //// bit4bit3:预留 
  //// bit0-2:ModifyType的定义
  public var modifyType: UInt32 = 0

  /// 服务器更新时间戳 20140101时间戳
  public var updateTime: UInt32 = 0

  /// 本地修改时间戳 20140101时间戳
  public var modifyTime: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 协议传输使用
public struct Com_Yf_Coros_Userdata_PoiList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 一次最多传输20个poi，如果超过20个分包传输
  public var poiArr: [Com_Yf_Coros_Userdata_PoiInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Yf_Coros_Userdata_PoiListToApp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///是否需要全量更新，新表或恢复出厂才需要
  public var fullUpdateFlag: UInt32 = 0

  /// 一次最多传输20个poi，如果超过20个分包传输
  public var poiArr: [Com_Yf_Coros_Userdata_PoiInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Com_Yf_Coros_Userdata_PoiListToServer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///上次在服务器备份时间
  public var lastUpdateTime: UInt32 = 0

  /// 一次最多传输20个poi，如果超过20个分包传输
  public var poiArr: [Com_Yf_Coros_Userdata_PoiInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.yf.coros.userdata"

extension Com_Yf_Coros_Userdata_ModifyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODIFY_NORMAL"),
    1: .same(proto: "MODIFY_ADD"),
    2: .same(proto: "MODIFY_UPDATE"),
    3: .same(proto: "MODIFY_DELETE"),
  ]
}

extension Com_Yf_Coros_Userdata_PoiInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PoiInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_id"),
    2: .same(proto: "lat"),
    3: .same(proto: "lng"),
    4: .same(proto: "altitude"),
    5: .same(proto: "name"),
    6: .same(proto: "type"),
    7: .standard(proto: "create_time"),
    8: .standard(proto: "modify_type"),
    9: .standard(proto: "update_time"),
    10: .standard(proto: "modify_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularSInt32Field(value: &self.localID)
      case 2: try decoder.decodeSingularSInt32Field(value: &self.lat)
      case 3: try decoder.decodeSingularSInt32Field(value: &self.lng)
      case 4: try decoder.decodeSingularSInt32Field(value: &self.altitude)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.type)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.createTime)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.modifyType)
      case 9: try decoder.decodeSingularUInt32Field(value: &self.updateTime)
      case 10: try decoder.decodeSingularUInt32Field(value: &self.modifyTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.localID != 0 {
      try visitor.visitSingularSInt32Field(value: self.localID, fieldNumber: 1)
    }
    if self.lat != 0 {
      try visitor.visitSingularSInt32Field(value: self.lat, fieldNumber: 2)
    }
    if self.lng != 0 {
      try visitor.visitSingularSInt32Field(value: self.lng, fieldNumber: 3)
    }
    if self.altitude != 0 {
      try visitor.visitSingularSInt32Field(value: self.altitude, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if self.type != 0 {
      try visitor.visitSingularUInt32Field(value: self.type, fieldNumber: 6)
    }
    if self.createTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.createTime, fieldNumber: 7)
    }
    if self.modifyType != 0 {
      try visitor.visitSingularUInt32Field(value: self.modifyType, fieldNumber: 8)
    }
    if self.updateTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.updateTime, fieldNumber: 9)
    }
    if self.modifyTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.modifyTime, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Yf_Coros_Userdata_PoiInfo, rhs: Com_Yf_Coros_Userdata_PoiInfo) -> Bool {
    if lhs.localID != rhs.localID {return false}
    if lhs.lat != rhs.lat {return false}
    if lhs.lng != rhs.lng {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.modifyType != rhs.modifyType {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.modifyTime != rhs.modifyTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Yf_Coros_Userdata_PoiList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PoiList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "poi_arr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.poiArr)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.poiArr.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poiArr, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Yf_Coros_Userdata_PoiList, rhs: Com_Yf_Coros_Userdata_PoiList) -> Bool {
    if lhs.poiArr != rhs.poiArr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Yf_Coros_Userdata_PoiListToApp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PoiListToApp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "full_update_flag"),
    2: .standard(proto: "poi_arr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.fullUpdateFlag)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.poiArr)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fullUpdateFlag != 0 {
      try visitor.visitSingularUInt32Field(value: self.fullUpdateFlag, fieldNumber: 1)
    }
    if !self.poiArr.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poiArr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Yf_Coros_Userdata_PoiListToApp, rhs: Com_Yf_Coros_Userdata_PoiListToApp) -> Bool {
    if lhs.fullUpdateFlag != rhs.fullUpdateFlag {return false}
    if lhs.poiArr != rhs.poiArr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Yf_Coros_Userdata_PoiListToServer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PoiListToServer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_update_time"),
    2: .standard(proto: "poi_arr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.lastUpdateTime)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.poiArr)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastUpdateTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.lastUpdateTime, fieldNumber: 1)
    }
    if !self.poiArr.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poiArr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Yf_Coros_Userdata_PoiListToServer, rhs: Com_Yf_Coros_Userdata_PoiListToServer) -> Bool {
    if lhs.lastUpdateTime != rhs.lastUpdateTime {return false}
    if lhs.poiArr != rhs.poiArr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
